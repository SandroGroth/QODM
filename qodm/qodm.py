# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QODM
                                 A QGIS plugin
 Interface to OpenDroneMap for UAV data processing within QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Sandro Groth
        email                : sandro_groth@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import Qgis

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog 

from qgis.gui import QgsMessageBar

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .qodm_dialog import QODMDialog

import os.path
import os
import shutil
import subprocess
import platform


class QODM:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.dlg = QODMDialog()
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QODM_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QODM')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # init user settings
        self.proj_path = None
        self.docker_path = None
        self.docker_toolbox = None

        self.out_prod_orthophoto = None
        self.out_prod_DTM = None
        self.out_prod_DSM = None
        self.out_prod_3DM = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QODM', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qodm/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Process UAV data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.dlg.tb_projdir.clicked.connect(self.select_proj_path)

    def select_proj_path(self):
        """Selects an UAV image directory with an open directory dialog"""

        in_dir = str(QFileDialog.getExistingDirectory(
            caption = 'Project Directory: ',
            directory = os.getcwd()
        ))

        self.set_proj_directory_line(in_dir)

    def set_proj_directory_line(self, text):
        self.dlg.le_projdir.setText(text)

    def get_proj_path(self):
        return self.dlg.le_projdir.text()

    def get_out_prod_orthophoto(self):
        return self.dlg.ch_orthophoto.isChecked()

    def get_out_prod_DTM(self):
        return self.dlg.ch_dtm.isChecked()

    def get_out_prod_DSM(self):
        return self.dlg.ch_dsm.isChecked()

    def get_out_prod_3DM(self):
        return self.dlg.ch_3dm.isChecked()
    
    def get_docker_path(self):
        docker_path = None
        try:
            docker_path = os.environ['DOCKER_PATH']
        except KeyError:
            self.iface.messageBar().pushMessage("Warning", "No docker installation specified in settings. Searching for docker in PATH.", level=Qgis.Warning)
            if platform.system() == 'Windows':
                try:
                    docker_path = os.environ['DOCKER_TOOLBOX_INSTALL_PATH']
                except KeyError:
                    try:
                        docker_path = os.environ['DOCKER_INSTALL_PATH'] #TODO: Check name of full docker installation variable
                    except KeyError:
                        pass
            if platform.system() == 'Linux':
                pass #TODO: Check how docker is installed on Unix systems
            if platform.system() == 'MacOS':
                pass #TODO: Check how docker is installed on MacOS systems
        finally:
            if not docker_path:
                self.iface.messageBar().pushMessage("Error", "No docker installation found. Make sure docker is properly installed and available in PATH.", level=Qgis.Critical)
                raise FileNotFoundError('No docker installation found. Make sure docker is properly installed and available in PATH.')
        
        return docker_path

    def is_docker_toolbox(self):
        is_toolbox = None
        if platform.system() == 'Windows':
            try:
                if os.environ['DOCKER_TOOLBOX'] == 'TRUE':
                    is_toolbox = True
                elif os.environ['DOCKER_TOOLBOX'] == 'FALSE':
                    is_toolbox = False
            except KeyError:
                try:
                    os.environ['DOCKER_TOOLBOX_INSTALL_PATH']
                    is_toolbox = True
                except KeyError:
                    is_toolbox = False
        
        return is_toolbox

    def set_variables(self):
        self.proj_path = self.get_proj_path()
        self.docker_path = self.get_docker_path()
        self.docker_toolbox = self.is_docker_toolbox()

        self.out_prod_orthophoto = self.get_out_prod_orthophoto()
        self.out_prod_DTM = self.get_out_prod_DTM()
        self.out_prod_DSM = self.get_out_prod_DSM()
        self.out_prod_3DM = self.get_out_prod_3DM()
    
    def execute(self):
        self.iface.messageBar().pushMessage("Info", "Docker found in {}".format(self.docker_path), level=Qgis.Info)
        self.iface.messageBar().pushMessage("Info", "Is Docker Toolbox: {}".format(self.docker_toolbox), level=Qgis.Info)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QODM'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.set_variables()
            self.execute()
